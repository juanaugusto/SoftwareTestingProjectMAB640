package br.ufrj.testproj.facilitator.graphcoverage;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.NoSuchElementException;

import br.ufrj.testproj.principal.calculator.CalculateBankOBI;
import br.ufrj.testproj.principal.calculator.CalculatePalindromeOBI;

public class BankFacilitator extends Facilitator {
	
	int[][] inputs;
	
	public void createBankFacilitator(){
		this.nodeRequirements = new int [] { 1,2,3,4,5,6,7,8,9,10,11,12,13,14 };
		this.edgeRequirements = new int [][] { 
			{1, 2}, {1, 3}, {3, 4}, {4, 5}, {4, 6}, {6, 7}, {7, 8}, {7, 10}, 
			{8, 7}, {8, 9}, {9, 10}, {10, 11}, {10, 12}, {11, 14}, {12, 13}, 
			{12, 14}, {13, 14}, {14, 4}
		};
		this.edgePairRequirements = new int [][] {
			{1, 2}, {1, 3, 4}, {3, 4, 5}, {3, 4, 6}, {4, 6, 7}, {6, 7, 8},
			{6, 7, 10}, {7, 8, 7}, {7, 8, 9}, {7, 10, 11}, {7, 10, 12}, 
			{8, 7, 8}, {8, 7, 10}, {8, 9, 10}, {9, 10, 11}, {9, 10, 12}, 
			{10, 11, 14}, {10, 12, 13}, {10, 12, 14}, {11, 14, 4}, {12, 13, 14}, 
			{12, 14, 4}, {13, 14, 4}, {14, 4, 5}, {14, 4, 6}
		};
		
		this.primePathsRequirements = new int[][] {
			{1, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14}, {6, 7, 8, 9, 10, 12, 13, 14, 4, 5}, 
			{4, 6, 7, 8, 9, 10, 12, 13, 14, 4}, {6, 7, 8, 9, 10, 12, 13, 14, 4, 6}, 
			{7, 8, 9, 10, 12, 13, 14, 4, 6, 7}, {1, 3, 4, 6, 7, 8, 9, 10, 11, 14}, 
			{1, 3, 4, 6, 7, 8, 9, 10, 12, 14}, {8, 9, 10, 12, 13, 14, 4, 6, 7, 8}, 
			{12, 13, 14, 4, 6, 7, 8, 9, 10, 12}, {13, 14, 4, 6, 7, 8, 9, 10, 12, 13}, 
			{14, 4, 6, 7, 8, 9, 10, 12, 13, 14}, {12, 13, 14, 4, 6, 7, 8, 9, 10, 11}, 
			{9, 10, 12, 13, 14, 4, 6, 7, 8, 9}, {10, 12, 13, 14, 4, 6, 7, 8, 9, 10}, 
			{11, 14, 4, 6, 7, 8, 9, 10, 12, 13}, {6, 7, 8, 9, 10, 12, 14, 4, 5}, 
			{6, 7, 8, 9, 10, 11, 14, 4, 6}, {6, 7, 8, 9, 10, 11, 14, 4, 5}, {6, 7, 8, 9, 10, 12, 14, 4, 6}, 
			{7, 8, 9, 10, 12, 14, 4, 6, 7}, {7, 8, 9, 10, 11, 14, 4, 6, 7}, {4, 6, 7, 8, 9, 10, 12, 14, 4}, 
			{1, 3, 4, 6, 7, 10, 12, 13, 14}, {4, 6, 7, 8, 9, 10, 11, 14, 4}, {8, 9, 10, 11, 14, 4, 6, 7, 8}, 
			{12, 14, 4, 6, 7, 8, 9, 10, 11}, {12, 14, 4, 6, 7, 8, 9, 10, 12}, {14, 4, 6, 7, 8, 9, 10, 12, 14},
			{14, 4, 6, 7, 8, 9, 10, 11, 14}, {11, 14, 4, 6, 7, 8, 9, 10, 11}, {9, 10, 11, 14, 4, 6, 7, 8, 9}, 
			{8, 9, 10, 12, 14, 4, 6, 7, 8}, {9, 10, 12, 14, 4, 6, 7, 8, 9}, {10, 12, 14, 4, 6, 7, 8, 9, 10}, 
			{10, 11, 14, 4, 6, 7, 8, 9, 10}, {6, 7, 10, 12, 13, 14, 4, 6}, {6, 7, 10, 12, 13, 14, 4, 5},
			{7, 10, 12, 13, 14, 4, 6, 7}, {8, 7, 10, 12, 13, 14, 4, 5}, {1, 3, 4, 6, 7, 10, 12, 14}, 
			{1, 3, 4, 6, 7, 10, 11, 14}, {4, 6, 7, 10, 12, 13, 14, 4}, {8, 7, 10, 12, 13, 14, 4, 6}, 
			{12, 13, 14, 4, 6, 7, 10, 11}, {12, 13, 14, 4, 6, 7, 10, 12}, {11, 14, 4, 6, 7, 10, 12, 13}, 
			{14, 4, 6, 7, 10, 12, 13, 14}, {13, 14, 4, 6, 7, 10, 12, 13}, {10, 12, 13, 14, 4, 6, 7, 10}, 
			{6, 7, 10, 12, 14, 4, 6}, {6, 7, 10, 12, 14, 4, 5}, {6, 7, 10, 11, 14, 4, 5}, {6, 7, 10, 11, 14, 4, 6}, 
			{8, 7, 10, 11, 14, 4, 5}, {8, 7, 10, 11, 14, 4, 6}, {7, 10, 12, 14, 4, 6, 7}, {7, 10, 11, 14, 4, 6, 7}, 
			{4, 6, 7, 10, 12, 14, 4}, {4, 6, 7, 10, 11, 14, 4}, {8, 7, 10, 12, 14, 4, 5}, {12, 14, 4, 6, 7, 10, 11}, 
			{11, 14, 4, 6, 7, 10, 11}, {12, 14, 4, 6, 7, 10, 12}, {14, 4, 6, 7, 10, 11, 14}, {14, 4, 6, 7, 10, 12, 14},
			{10, 12, 14, 4, 6, 7, 10}, {8, 7, 10, 12, 14, 4, 6}, {10, 11, 14, 4, 6, 7, 10}, 
			{1, 3, 4, 5}, {7, 8, 7}, {8, 7, 8}, {1, 2}
		};
		
		// C, N , T[] and D[]	
		
		// meet Node Requirements
//		inputs = new int[][] {
//			{1}, {1}, {0}, {1},
//			{1}, {10}, {0,5,10,15,20,25,30,30,30,30}, {4,5,6,6,5,4,10,10,10,10},
//		};
		
		// meet Edge Requirements
//		inputs = new int[][] {
//			{2}, {2}, {0, 0}, {1, 1},
//			{1}, {10}, {0,5,10,15,20,25,30,30,30,30}, {1,2,3,4,5,6,7,8,9,10},
//			{3}, {4}, {0,2,4,4}, {3,1,1,1}
//		};
		
		// meet Edge-Pair Requirements
//		inputs = new int[][] {
//			{2}, {2}, {0, 0}, {1, 1},
//			{1}, {10}, {0,5,10,15,20,25,30,30,30,30}, {1,2,3,4,5,6,7,8,9,10},
//			{3}, {10}, {0,3,6,9,12,15,18,21,24,27}, {9,9,9,9,9,9,9,9,9,9},
//			{3}, {4}, {0,2,4,4}, {3,1,1,1},
//			{3}, {4}, {0,2,4,4}, {3,3,3,1}
//		};		
		
		// meet Prime Path Requirements
		inputs = new int[][] {
			{2}, {2}, {0, 0}, {1, 1},
			{1}, {10}, {0,5,10,15,20,25,30,30,30,30}, {1,2,3,4,5,6,7,8,9,10},
			{3}, {10}, {0,3,6,9,12,15,18,21,24,27}, {9,9,9,9,9,9,9,9,9,9},
			{3}, {4}, {0,2,4,4}, {3,1,1,1},
			{3}, {4}, {0,2,4,4}, {3,3,3,1},
			{3}, {7}, {0,1,2,3,4,5,6}, {1,1,5,5,5,10,10},
			{3}, {15}, {0,0,0,1,1,1,2,2,2,3,3,3,100,100,100}, {10,9,8,7,6,6,7,8,9,10,10,9,8,7,6},
			{7}, {15}, {10,10,10,10,10,10,10,100,100,100,100,100,100,100,110}, {10,10,10,10,10,6,7,8,9,10,10,9,8,7,6},
			{1}, {12}, {0,0,0,0,10,10,10,10,20,20,20,20}, {10,10,10,10,8,8,8,8,10,10,10,10},
			{1}, {6}, {0,1,3,4,5,50}, {9,1,9,1,1,5},
			{1}, {12}, {0,1,3,4,5,50,51,53,54,55,56,120}, {9,1,9,1,1,5,10,10,5,7,1,4}

		};
		
		for(int i = 0; i < inputs.length; i=i+4){
			CalculateBankOBI bank = new CalculateBankOBI()
					.calculateWrongBank(
							inputs[i][0], 
							inputs[i+1][0],
							inputs[i+2],
							inputs[i+3]
					);
			
			ArrayList<Integer> pathTraveled = bank.getPathPercurred();
			int output = bank.getReturnedValue();
			
			calculateReachedForCriterias(pathTraveled, output);

		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		BankFacilitator bf = new BankFacilitator();
		bf.createBankFacilitator();
		bf.showStatistics();
		
	}

	

}
